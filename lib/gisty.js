// Generated by CoffeeScript 1.6.3
(function() {
  var Gisty, xhr;

  xhr = require('request');

  Gisty = (function() {
    var api, request;

    api = 'https://api.github.com';

    function Gisty(options) {
      if (options == null) {
        options = {};
      }
      this.setOptions(options);
    }

    Gisty.prototype.setOptions = function(options) {
      this.options = options;
      if ((this.options.login != null) && (this.options.username == null)) {
        this.options.username = this.options.login;
      }
      return this;
    };

    Gisty.prototype.fetch = function(id, fn) {
      if (id == null) {
        throw new Error('You should specify gist id for fetch information');
      }
      this.scheme = '/gists/' + id;
      return request(this, fn);
    };

    Gisty.prototype.comments = function(id, fn) {
      if (id == null) {
        throw new Error('You should specify gist id for fetch comments');
      }
      this.scheme = '/gists/' + id + '/comments';
      return request(this, fn);
    };

    Gisty.prototype.all = function(fn) {
      this.scheme = this.options.username != null ? '/users/' + this.options.username + '/gists' : '/gists';
      return request(this, fn);
    };

    Gisty.prototype["public"] = function(fn) {
      this.scheme = '/gists/public';
      return request(this, fn);
    };

    Gisty.prototype.starred = function(fn) {
      this.scheme = '/gists/starred';
      return request(this, fn);
    };

    request = function(self, fn) {
      var options;
      if (fn == null) {
        fn = function() {};
      }
      options = {
        url: api + self.scheme,
        headers: {
          "User-Agent": "Gisty/0.1.4 (https://github.com/meritt/node-gisty)"
        }
      };
      if (self.options.token != null) {
        options.headers.Authorization = "token " + self.options.token;
      } else if ((self.options.login != null) && (self.options.password != null)) {
        options.headers.Authorization = "Basic " + new Buffer(self.options.login + ':' + self.options.password).toString('base64');
      }
      return xhr(options, function(error, request, body) {
        var limit, _ref;
        body = JSON.parse(body);
        if ((_ref = request.statusCode) !== 200 && _ref !== 201 && _ref !== 204) {
          error = body;
        }
        limit = request.headers != null ? parseInt(request.headers['x-ratelimit-remaining']) > 0 : true;
        if (!error && !limit) {
          error = {
            message: 'Your limit is over'
          };
        }
        return fn.call(self, error, body);
      });
    };

    return Gisty;

  })();

  module.exports = Gisty;

}).call(this);
